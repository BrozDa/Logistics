// <auto-generated />
using System;
using MapService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapService.Infrastructure.Migrations
{
    [DbContext(typeof(MapServiceContext))]
    [Migration("20250925123729_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MapService.Domain.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DestinationNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DestinationNodeId");

                    b.HasIndex("SourceNodeId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("MapService.Domain.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("MapService.Domain.Models.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("MapService.Domain.Models.Edge", b =>
                {
                    b.HasOne("MapService.Domain.Models.Node", "DestinationNode")
                        .WithMany("EdgesTo")
                        .HasForeignKey("DestinationNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MapService.Domain.Models.Node", "SourceNode")
                        .WithMany("EdgesFrom")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationNode");

                    b.Navigation("SourceNode");
                });

            modelBuilder.Entity("MapService.Domain.Models.Node", b =>
                {
                    b.HasOne("MapService.Domain.Models.Map", "Map")
                        .WithMany("Nodes")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("MapService.Domain.Models.Map", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("MapService.Domain.Models.Node", b =>
                {
                    b.Navigation("EdgesFrom");

                    b.Navigation("EdgesTo");
                });
#pragma warning restore 612, 618
        }
    }
}
